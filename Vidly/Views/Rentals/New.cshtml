@model dynamic
@{
    ViewBag.Title = "New Rental Form";

}

<h2>New Rental Form</h2>

<form id="newRental">
    <div class="mb-3">
        <label> Customers </label>
        <div class="tt-container">
            <input id="customers" name="customer" type="text" value="" class="form-control" />
            
        </div>
    </div>

    <div class="mb-3">
        <label> Movies </label>
        <div class="tt-container">
            <input id="movie" type="text" name="movie" value="" class="form-control" />
            @*name attribute is required for the jquery validation attribute to do it's job'*@
        </div>
    </div>

    <div class="row">
        <div class="col-md-4">
            <ul id="movies" class="list-group mb-3"></ul>
        </div>
    </div>

    <button type="submit" class="btn btn-primary"> Submit </button>
</form>



@section scripts{

    @Scripts.Render("~/bundles/jqueryval")

    <script>
        $(document).ready(function () {
            var vm = {
                movieIds: []
            };
            var customers = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                remote: {
                    url: '/api/customers?query=%QUERY',
                    wildcard: '%QUERY',

                }
            });

            $('#customers').typeahead(
                {
                    highlight: true,
                    minLength: 1

                }, {

                name: 'customers',
                display: 'name',
                limit: Number.MAX_VALUE,
                source: customers
            }).on("typeahead:select", function (e, customer) {
                vm.customerId = customer.id;
                 
            });

            var movies = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                remote: {
                    url: '/api/movies?query=%QUERY',
                    wildcard: '%QUERY',

                }
            });

            $('#movie').typeahead(
                {
                    highlight: true,
                    minLength: 1

                }, {

                name: 'movies',
                display: 'name',
                limit: Number.MAX_VALUE,
                source: movies
            }).on("typeahead:select", function (e, movie) {
                $("#movies").append("<li class='list-group-item'>" + movie.name + "</li>");

                $("#movie").typeahead("val", "");

                vm.movieIds.push(movie.id);
            });

            //To add custom vadidation message - so that we get an error if we type some other name
            $.validator.addMethod("validCustomer", function () {
                return vm.customerId && vm.customerId !== 0;
            }, "Please select a valid customer.");

            //To add custom validation message to movies - so atleast one movie is selected
            $.validator.addMethod("atleastOneMovie", function () {
                return vm.movieIds.length > 0;
            }, "Please select atleast one movie");


            //To add validation to the form before submitting
            var validator = $("#newRental").validate({
                rules: {
                    customer: { validCustomer: true },
                    movie: { atleastOneMovie: true }
                },
                submitHandler: function () {
                    //e.preventDefault(); //Here this was used in the submit event handler. So this does not work here.
                    //So we use a different approach here, We add return false at the end of this function
                    //- so that, when submit handler is called we immediately call the ajax function to call the sever and hen return false/
                    //So this prevents the form from being submitted normally.

                    $.ajax({
                        url: "/api/newRentals",
                        method: "post",
                        data: vm
                    }).done(function () {
                        toastr.success("Rentals successfully recorded.")

                        //In order to clear the form.
                        $("#customers").typeahead("val", "");
                        $("#movie").typeahead("val", "");
                        $("#movies").empty();

                        vm = { movieIds: [] }; //To reset the view model

                        //In order to reset the state of the form in terms of its validation
                        validator.resetForm();

                    }).fail(function () {
                        toastr.error("Something unexpected happened.")
                    });

                    return false;
                }
            });

            //$("#newRental").submit(function (e) {
            //    e.preventDefault();

            //    $.ajax({
            //        url: "/api/newRentals",
            //        method: "post",
            //        data: vm
            //    }).done(function () {
            //        toastr.success("Rentals successfully recorded.")
            //    }).fail(function () {
            //        toastr.error("Something unexpected happened.")
            //    });
            //});

        });

    </script>
}

